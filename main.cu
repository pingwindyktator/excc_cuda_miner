#include <cstdio>
#include <cstdlib>
#include <unistd.h>
#include <iostream>
#include <algorithm>
#include "solver.cuh"

struct testData_s {
    const char *header;
    const long nonce;
    const u32 expected_solutions_size;
    const u32 expected_solutions[MAXSOLS][PROOFSIZE];
};

testData_s testData[] = {
    {"block header", 0, 3, {
        {1948823, 6927010,  5051182,  16853572, 7567151,  8174004,  9697548,  30082354, 4126978,  11219458, 12046931, 26296269, 6960990,  7513282,  15641819, 29553952, 2075509, 3917596,  26506206, 32423116, 20172796, 26046597, 21008102, 32605968, 7733247,  28951159, 19401173, 22240259, 12527355, 25816053, 26924563, 30167801},
        {893099,  8838806,  28398733, 31357275, 16596368, 25123776, 18326148, 31682454, 924167,  27761424, 20546064, 30880786, 2931034,  11343701, 17011529, 26876917, 4915668, 8097132,  17630254, 19828133, 5205703,  15014329, 13248799, 31182371, 7887075, 22909946, 28758238, 31473391, 14791659, 33348545, 23436578, 26267836},
        {592534, 16727887, 7453057,  25925862, 3112444, 22940957, 11281555, 31775301, 1334223, 20443726, 11070438, 27290152, 4163350, 8213747,  9315696,  19739115, 1204738, 23545872, 1776094,  13506389, 6697536,  27749507, 11388567, 14622750, 4026870,  14622947, 8538779,  27133048, 11652285, 21221152, 22429643, 26529065},
    }},

    {"block header", 1,  5, {
        {582263,  3783052,  2313999,  19478261, 1954747,  14513744, 5696384,  9983371,  770696,  25399708, 2469656,  31060031, 1409486,  25011708, 6197016,  24800042, 4526208, 20923264, 22532911, 24458988, 19054856, 19620962, 21223763, 25258694, 5339436, 15681349, 11143785, 21451088, 8434833,  30577236, 27811311, 32663733},
        {370176, 12908777, 1114179,  27164301, 6258700, 25604518, 23849263, 25098550, 3874837, 22260519, 6421829,  20746376, 9010370, 14958301, 11701370, 20286183, 3453033, 22917202, 17399732, 25201320, 12365907, 25599116, 12861876, 16581537, 6291684,  17504753, 17494629, 17928408, 10119629, 10615318, 17868827, 20213583},
        {1791926, 8318711, 26251202, 32356717, 6997365, 25735638, 21576954, 30111878, 3898334, 19905391, 5033991, 16030336, 5245813, 26522082, 5669465, 16635645, 8277609, 22422842, 13069153, 29511907, 20365907, 23921315, 24326546, 32342867, 12058103, 23466254, 19021516, 19329156, 15273796, 15658582, 15782868, 30953403},
        {635733,  25222820, 21014930, 29574076, 1000985,  5604521,  6974734,  19935829, 3041402,  6498908,  27180330, 29522758, 3065872,  28403257, 5814381,  33337207, 1920304, 16178841, 24948948, 25474220, 14568607, 30131615, 16282584, 28097350, 6277286,  20609353, 13688741, 20448955, 8669674,  28133172, 18969419, 33014245},
        {1784595, 8730569, 2952232, 8311088, 3848398, 24535350, 6741302, 15864803, 5653320, 16018355, 17835034, 29486303, 5823367, 20140719, 7233264, 33483182, 3117353, 20053611, 3338894, 15846604, 7165521, 28162236, 8412349, 11018248, 7341551, 18365873, 16351743, 22192468, 8662075, 9732645, 14238971, 22027130},
    }},

    {"block header", 2,  3, {
        {2024468, 30788885, 16549044, 31105157, 10766172, 27803398, 14188383, 18350597, 8340166, 12112117, 9771703,  16475394, 15638163, 19852515, 16164133, 21283881, 3012382, 10164383, 4371003,  27267590, 4579840,  32997246, 17142413, 27563106, 4959833, 19397820, 7489484,  26132602, 7957443,  27721944, 26669199, 27861139},
        {631838, 32379030, 12115828, 15370934, 1071098, 28542374, 3749356,  23094728, 1030877, 4102154,  3296262,  16677836, 7373429, 23553272, 13706818, 22718294, 1600870, 2009968,  24236940, 26722391, 3296672,  30961726, 8361013,  20154770, 3094572,  28709268, 6668495,  32281682, 11480232, 24080407, 21721486, 26351116},
        {5378620, 10759970, 17807788, 29226493, 11529006, 22674062, 17704747, 23436136, 10872275, 25829134, 15459988, 21678082, 17603136, 22657822, 22774669, 23569569, 6492083, 20372131, 27398382, 33053456, 21986403, 23346432, 29327458, 33052852, 13637567, 26765408, 26834306, 29589598, 17363888, 31088383, 17860587, 20580709},
    }},

    {"block header", 10, 0, {}},

    {"block header", 11, 1, {
        {911662, 22138389, 8210265,  31274530, 8029780, 20878462, 18256796, 24246891, 1935509, 22500647, 18385714, 21573406, 5314654, 11279996, 7578895,  12470048, 3573289, 16335834, 8230824,  25830081, 4414521,  7228234,  20359437, 21115537, 11102213, 12353678, 19277545, 26893604, 13111251, 30773720, 14408826, 26047501},
    }},
};

void test () {
    for (auto& data : testData) {
        long solutions_size = 0;
        bool ok = true;

        solve(data.header, data.nonce, [&] (const u32 *solution) {
            ++solutions_size;
            ok &= std::any_of(data.expected_solutions, data.expected_solutions + data.expected_solutions_size,
                    [&] (const u32 *expected_solution) { return memcmp(expected_solution, solution, PROOFSIZE) == 0; });
        }, 8192, 0, 1, false);

        ok &= (solutions_size == data.expected_solutions_size);

        if (!ok) {
            std::cout << "TEST FAILED FOR HEADER: \"" << data.header << "\", NONCE: " << data.nonce << '\n';
            return;
        }
    }

    std::cout << "ALL TESTS PASSED\n";
}

void onSolutionFound(const u32 *solution) {
    std::cout << "SOLUTION FOUND: ";

    for (u32 i = 0; i < PROOFSIZE; ++i) {
        std::cout << solution[i] << ' ';
    }

    std::cout << "\n";
}

int main (int argc, char *argv[]) {
    checkCudaErrors(cudaSetDeviceFlags(cudaDeviceScheduleYield));

    long nthreads = 8192;
    long nonce = 0;
    long tpb = 0;
    long range = 1;
    const char *header = "";
    int c;

    while ((c = getopt (argc, argv, "h:n:r:t:p")) != -1) {
        switch (c) {
            case 'h':
                header = optarg;
                break;
            case 'n':
                nonce = strtol(optarg, nullptr, 10);
                break;
            case 't':
                nthreads = strtol(optarg, nullptr, 10);
                break;
            case 'p':
                tpb = strtol(optarg, nullptr, 10);
                break;
            case 'r':
                range = strtol(optarg, nullptr, 10);
                break;
            default:
                break;
        }
    }

    test();
//    solve(header, nonce, onSolutionFound, nthreads, tpb, range);
}
